#!/bin/bash
# Backup a database *locally* to /backups/.
# TODO: turn these into ansible templates to define these 4 variables
#       2 are already defined {{ psql_ext }} and {{ xz_ext }}

DB="$1"

# filename extension expected for pg_dump output scripts (e.g. "dump" or "pg" or "sql" or "pgsql" or "psql")
EXT="$2"
XZ_EXT="$3"
# pg_dump format option: plain (sql) or custom (binary)
DUMP_FORMAT="$4"

echo "DUMP_FORMAT = \"$DUMP_FORMAT\""

# If you don't first change to the /tmp directory, then you may not be able to cd to the directory you are already in! 
# e.g.: could not change directory to "/home/Hobson": Permission denied
mkdir -p /tmp
OLDPWD=`pwd`
cd /tmp

mkdir -p /backups
BACKUP_FILE="$DB-$(date +%F).$DUMP_FORMAT$EXT"
# can also do a pg_dump --clean to delete the old database, to avoid errors withn the database already exists during restore
echo /usr/bin/pg_dump --create --format=$DUMP_FORMAT $DB \> /backups/$BACKUP_FILE
/usr/bin/pg_dump --create --format=$DUMP_FORMAT $DB > /backups/$BACKUP_FILE
if [ "$XZ_EXT" ]; then
    echo /usr/bin/xz /backups/$BACKUP_FILE \> /backups/$XZ_BACKUP_FILE
    /usr/bin/xz /backups/$BACKUP_FILE > "/backups/$BACKUP_FILE$XZ_EXT"
fi
LATEST_LINK="/backups/$DB-latest.$DUMP_FORMAT$EXT$XZ_EXT"
if [ -L "$LATEST_LINK" ]; then
    rm -f "$LATEST_LINK"
    echo rm -f "$LATEST_LINK"
fi
ln -s "/backups/$BACKUP_FILE" "$LATEST_LINK"

# return to the directory you were in before (if you can!)
if [ -d "$OLDPWD" ]; then
    cd "$OLDPWD"
fi


